{% extends 'base.html' %}

{% block title %}Set Up Bidding Strategy - NHL Instant Replay Bidding{% endblock %}

{% block content %}
<div class="row mb-4">
    <div class="col-12">
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="{{ url_for('dashboard') }}">Dashboard</a></li>
                <li class="breadcrumb-item"><a href="{{ url_for('moment_detail', moment_id=moment['id']) }}">{{ moment['name'] }}</a></li>
                <li class="breadcrumb-item active" aria-current="page">Set Up Strategy</li>
            </ol>
        </nav>
    </div>
</div>

<div class="row mb-4">
    <div class="col-12">
        <h1>{% if existing_strategy %}Edit{% else %}Create{% endif %} Automated Bidding Strategy</h1>
        <p class="lead">Configure how your brand will bid on {{ moment['name'] }} moments during NHL games</p>
    </div>
</div>

<div class="row">
    <div class="col-md-8">
        <div class="card mb-4">
            <div class="card-header">
                <h4 class="mb-0">Strategy Configuration</h4>
            </div>
            <div class="card-body">
                <form method="POST" action="{{ url_for('setup_strategy', moment_id=moment['id']) }}">
                    <div class="mb-4">
                        <h5>Selected Moment</h5>
                        <div class="d-flex align-items-center p-3 bg-light rounded">
                            <i class="fas fa-hockey-puck fa-2x me-3 text-primary"></i>
                            <div>
                                <h5 class="mb-0">{{ moment['name'] }}</h5>
                                <p class="mb-0 text-muted">{{ moment['description'] }}</p>
                            </div>
                            <div class="ms-auto">
                                <span class="badge bg-primary">{{ moment['exposure'] }} Exposure</span>
                            </div>
                        </div>
                    </div>

                    <div class="mb-4">
                        <h5>Select Game</h5>
                        <select class="form-select" name="game_id" id="game_id" required>
                            <option value="" selected disabled>Choose a game...</option>
                            {% for game in upcoming_games %}
                            <option value="{{ game['id'] }}" {% if selected_game_id and selected_game_id|int == game['id'] %}selected{% endif %}
                                data-home="{{ game['home'] }}" data-away="{{ game['away'] }}">
                                {{ game['date'] }} - {{ game['time'] }}: {{ game['away'] }} @ {{ game['home'] }}
                            </option>
                            {% endfor %}
                        </select>
                    </div>

                    <hr class="my-4">

                    <div class="mb-4">
                        <h5>Bidding Parameters</h5>
                        <div class="row">
                            <div class="col-md-4 mb-3">
                                <label for="base_bid" class="form-label">Base Bid Amount ($)</label>
                                <div class="input-group">
                                    <span class="input-group-text">$</span>
                                    <input type="number" class="form-control" id="base_bid" name="base_bid" min="1000" step="100" 
                                           value="{{ existing_strategy.base_bid if existing_strategy else 3000 }}" required>
                                </div>
                                <div class="form-text">Your starting bid for each {{ moment['name'] }} moment</div>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label for="bid_increment" class="form-label">Bid Increment ($)</label>
                                <div class="input-group">
                                    <span class="input-group-text">$</span>
                                    <input type="number" class="form-control" id="bid_increment" name="bid_increment" min="100" step="100" 
                                           value="{{ existing_strategy.bid_increment if existing_strategy else 500 }}" required>
                                </div>
                                <div class="form-text">Amount to increase bid during competitive auctions</div>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label for="max_bid" class="form-label">Maximum Bid Amount ($)</label>
                                <div class="input-group">
                                    <span class="input-group-text">$</span>
                                    <input type="number" class="form-control" id="max_bid" name="max_bid" min="1000" step="100" 
                                           value="{{ existing_strategy.max_bid if existing_strategy else 7000 }}" required>
                                </div>
                                <div class="form-text">Your system will never bid above this amount</div>
                            </div>
                        </div>
                    </div>

                    <div class="mb-4">
                        <h5>Strategic Focus</h5>
                        <div class="mb-3">
                            <label for="team_focus" class="form-label">Team Focus</label>
                            <select class="form-select" id="team_focus" name="team_focus" required>
                                <option value="both" {% if existing_strategy and existing_strategy.team_focus == 'both' %}selected{% endif %}>Both Teams</option>
                                <option value="home" {% if existing_strategy and existing_strategy.team_focus == 'home' %}selected{% endif %}>Home Team Only</option>
                                <option value="away" {% if existing_strategy and existing_strategy.team_focus == 'away' %}selected{% endif %}>Away Team Only</option>
                            </select>
                            <div class="form-text">Select which team's {{ moment['name'] }} moments you want to bid on</div>
                        </div>

                        <div class="mb-3">
                            <label for="player_focus" class="form-label">Player Focus (Optional)</label>
                            <div class="input-group">
                                <input type="text" class="form-control" id="player_focus" name="player_focus" 
                                       placeholder="e.g., Connor McDavid, Sidney Crosby"
                                       value="{{ existing_strategy.player_focus if existing_strategy else '' }}">
                                <button type="button" class="btn btn-outline-primary" id="browsePlayersBtn">
                                    <i class="fas fa-users me-1"></i> Browse Players
                                </button>
                            </div>
                            <div class="form-text" id="player-focus-help">Please select a game first to browse players from those teams</div>
                        </div>

                        <!-- Direct script for handling the Browse Players button -->
                        <script>
                        document.addEventListener('DOMContentLoaded', function() {
                            const browseBtn = document.getElementById('browsePlayersBtn');
                            const gameSelect = document.getElementById('game_id');
                            const playerModal = new bootstrap.Modal(document.getElementById('playerSelectionModal'));

                            // Set initial state
                            browseBtn.disabled = !gameSelect.value;

                            // Update button state when game changes
                            gameSelect.addEventListener('change', function() {
                                browseBtn.disabled = !this.value;
                            });

                            // Show modal when button clicked
                            browseBtn.addEventListener('click', function() {
                                if (gameSelect.value) {
                                    playerModal.show();
                                } else {
                                    alert('Please select a game first');
                                }
                            });
                        });
                        </script>
                    </div>

                    <div class="mb-4">
                        <h5>Time and Period Restrictions</h5>
                        <div class="mb-3">
                            <label for="period_restrictions" class="form-label">Period Restrictions</label>
                            <select class="form-select" id="period_restrictions" name="period_restrictions">
                                <option value="" {% if not existing_strategy or not existing_strategy.period_restrictions %}selected{% endif %}>All Periods</option>
                                <option value="1" {% if existing_strategy and existing_strategy.period_restrictions == '1' %}selected{% endif %}>1st Period Only</option>
                                <option value="2" {% if existing_strategy and existing_strategy.period_restrictions == '2' %}selected{% endif %}>2nd Period Only</option>
                                <option value="3" {% if existing_strategy and existing_strategy.period_restrictions == '3' %}selected{% endif %}>3rd Period Only</option>
                                <option value="1,2" {% if existing_strategy and existing_strategy.period_restrictions == '1,2' %}selected{% endif %}>1st and 2nd Periods</option>
                                <option value="2,3" {% if existing_strategy and existing_strategy.period_restrictions == '2,3' %}selected{% endif %}>2nd and 3rd Periods</option>
                                <option value="OT" {% if existing_strategy and existing_strategy.period_restrictions == 'OT' %}selected{% endif %}>Overtime Only</option>
                                <option value="SO" {% if existing_strategy and existing_strategy.period_restrictions == 'SO' %}selected{% endif %}>Shootout Only</option>
                            </select>
                            <div class="form-text">Restrict your bidding to specific periods</div>
                        </div>

                        {% if moment['name'] == 'Overtime Goal/Shootout' %}
                        <div class="mb-3">
                            <label for="specific_scenario" class="form-label">Specific Scenario</label>
                            <select class="form-select" id="specific_scenario" name="specific_scenario">
                                <option value="both" {% if existing_strategy and existing_strategy.specific_scenario == 'both' %}selected{% endif %}>Both Overtime & Shootout</option>
                                <option value="OT" {% if existing_strategy and existing_strategy.specific_scenario == 'OT' %}selected{% endif %}>Overtime Goal Only</option>
                                <option value="SO" {% if existing_strategy and existing_strategy.specific_scenario == 'SO' %}selected{% endif %}>Shootout Only</option>
                            </select>
                            <div class="form-text">For overtime/shootout goals, specify which scenario you want to bid on</div>
                        </div>
                        {% endif %}
                    </div>

                    <div class="mb-4">
                        <h5>Ad Content</h5>
                        <div class="mb-3">
                            <label for="ad_content" class="form-label">Ad Content URL</label>
                            <input type="text" class="form-control" id="ad_content" name="ad_content" 
                                   placeholder="https://yourdomain.com/ads/nhl-ad.mp4" 
                                   value="{{ existing_strategy.ad_content if existing_strategy else 'https://example.com/test-ad.mp4' }}">
                            <div class="form-text">URL to your ad content that will appear in the instant replay overlay (placeholder URL is provided for testing)</div>
                        </div>
                    </div>

                    <div class="d-grid gap-2">
    <button type="submit" class="btn btn-primary btn-lg">
        <i class="fas fa-check-circle me-2"></i>
        {% if existing_strategy %}
            Update Bidding Strategy for {{ moment['name'] }}
        {% else %}
            Create Bidding Strategy for {{ moment['name'] }}
        {% endif %}
    </button>
    
    <!-- Cancel button redirects to game details page of the selected game -->
    <a href="{{ url_for('game_detail', game_id=selected_game_id) }}" class="btn btn-outline-secondary">Cancel</a>
    
    <!-- Add Remove Bidding Strategy button, only show if there's an existing strategy -->
    {% if existing_strategy %}
    <a href="{{ url_for('delete_strategy', strategy_id=existing_strategy.id) }}?redirect_game_id={{ selected_game_id }}" 
       class="btn btn-danger"
       onclick="return confirm('Are you sure you want to delete this bidding strategy?');">
        <i class="fas fa-trash-alt me-2"></i> Remove Bidding Strategy
    </a>
    {% endif %}
</div>
                </form>
            </div>
        </div>
    </div>

    <div class="col-md-4">
        <div class="card mb-4 sticky-top" style="top: 20px;">
            <div class="card-header bg-primary text-white">
                <h5 class="mb-0">Strategy Summary</h5>
            </div>
            <div class="card-body">
                <div id="strategy-summary">
                    <p><strong>Moment Type:</strong> <span id="summary-moment">{{ moment['name'] }}</span></p>
                    <p><strong>Game:</strong> <span id="summary-game">
                        {% if selected_game_id %}
                            {% for game in upcoming_games %}
                                {% if game.id == selected_game_id %}
                                    {{ game.date }} - {{ game.time }}: {{ game.away }} @ {{ game.home }}
                                {% endif %}
                            {% endfor %}
                        {% else %}
                            Not selected
                        {% endif %}
                    </span></p>
                    <p><strong>Base Bid:</strong> $<span id="summary-base-bid">{{ "{:,}".format(existing_strategy.base_bid|int) if existing_strategy else "3,000" }}</span></p>
                    <p><strong>Bid Increment:</strong> $<span id="summary-bid-increment">{{ "{:,}".format(existing_strategy.bid_increment|int) if existing_strategy else "500" }}</span></p>
                    <p><strong>Max Bid:</strong> $<span id="summary-max-bid">{{ "{:,}".format(existing_strategy.max_bid|int) if existing_strategy else "7,000" }}</span></p>
                    <p><strong>Team Focus:</strong> <span id="summary-team">
                        {% if existing_strategy and existing_strategy.team_focus %}
                            {% if existing_strategy.team_focus == 'both' %}Both Teams
                            {% elif existing_strategy.team_focus == 'home' %}Home Team Only
                            {% elif existing_strategy.team_focus == 'away' %}Away Team Only
                            {% else %}{{ existing_strategy.team_focus }}
                            {% endif %}
                        {% else %}
                            Both Teams
                        {% endif %}
                    </span></p>
                    <p><strong>Player Focus:</strong> <span id="summary-player">{{ existing_strategy.player_focus if existing_strategy and existing_strategy.player_focus else "All Players" }}</span></p>
                    <p><strong>Periods:</strong> <span id="summary-periods">
                        {% if existing_strategy and existing_strategy.period_restrictions %}
                            {% if existing_strategy.period_restrictions == '1' %}1st Period Only
                            {% elif existing_strategy.period_restrictions == '2' %}2nd Period Only
                            {% elif existing_strategy.period_restrictions == '3' %}3rd Period Only
                            {% elif existing_strategy.period_restrictions == '1,2' %}1st and 2nd Periods
                            {% elif existing_strategy.period_restrictions == '2,3' %}2nd and 3rd Periods
                            {% elif existing_strategy.period_restrictions == 'OT' %}Overtime Only
                            {% elif existing_strategy.period_restrictions == 'SO' %}Shootout Only
                            {% else %}{{ existing_strategy.period_restrictions }}
                            {% endif %}
                        {% else %}
                            All Periods
                        {% endif %}
                    </span></p>
                </div>

                <hr>

                <div class="mb-3">
                    <h6>Estimated Stats</h6>
                    <p><strong>Est. Win Rate:</strong> <span id="est-win-rate">62%</span></p>
                    <p><strong>Est. Cost:</strong> $<span id="est-cost">15,000 - 25,000</span></p>
                    <p><strong>Est. Impressions:</strong> <span id="est-impressions">500,000+</span></p>
                </div>

                <div class="alert alert-info">
                    <i class="fas fa-info-circle me-2"></i> Your strategy will automatically bid in real-time when conditions are met during the game.
                </div>
            </div>
            <div class="card-footer">
                <small class="text-muted">Strategies can be edited or paused at any time from your dashboard.</small>
            </div>
        </div>
    </div>
</div>

<!-- Player Selection Modal -->
<div class="modal fade" id="playerSelectionModal" tabindex="-1" aria-labelledby="playerSelectionModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="playerSelectionModalLabel">Select Players for Bidding Strategy</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row mb-3">
                    <div class="col-md-6">
                        <div class="input-group">
                            <input type="text" class="form-control" id="playerSearchInput" placeholder="Search by player name...">
                            <button class="btn btn-outline-secondary" type="button" id="searchPlayerBtn">
                                <i class="fas fa-search"></i>
                            </button>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <select class="form-select" id="positionFilter">
                            <option value="all">All Positions</option>
                            <option value="C">Center</option>
                            <option value="LW">Left Wing</option>
                            <option value="RW">Right Wing</option>
                            <option value="D">Defense</option>
                            <option value="G">Goalie</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <select class="form-select" id="teamFilter">
                            <option value="all">All Teams</option>
                            <!-- Team options will be populated dynamically based on selected game -->
                        </select>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-8">
                        <div class="card">
                            <div class="card-header">
                                <h5 class="mb-0">Available Players</h5>
                            </div>
                            <div class="card-body p-0">
                                <div class="table-responsive">
                                    <table class="table table-hover" id="playersTable">
                                        <thead>
                                            <tr>
                                                <th>Name</th>
                                                <th>Team</th>
                                                <th>Pos</th>
                                                <th>#</th>
                                                <th>Stats</th>
                                                <th>Action</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <!-- Players will be populated dynamically based on selected game -->
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-4">
                        <div class="card">
                            <div class="card-header bg-success text-white">
                                <h5 class="mb-0">Selected Players</h5>
                            </div>
                            <div class="card-body">
                                <div id="selectedPlayersContainer">
                                    <p id="noPlayersMessage" class="text-muted">No players selected. Click the "+" button to add players.</p>
                                    <ul id="selectedPlayersList" class="list-group mb-3">
                                        <!-- Selected players will be listed here -->
                                    </ul>
                                </div>

                                <div class="alert alert-info">
                                    <i class="fas fa-info-circle me-2"></i> Bidding will only trigger for moments involving your selected players.
                                </div>

                                <div class="d-grid">
                                    <button type="button" class="btn btn-success" id="confirmPlayerSelection">
                                        <i class="fas fa-check me-1"></i> Confirm Selection
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block scripts %}
<script>
    // Sample player data for reference
    const playerData = {
        // Rangers
        "NYR-1": {"id": "NYR-1", "name": "Igor Shesterkin", "team": "NYR", "teamName": "New York Rangers", "position": "G", "number": 31, "stats": "GAA: 2.48, SV%: .916, SO: 3"},
        "NYR-2": {"id": "NYR-2", "name": "Artemi Panarin", "team": "NYR", "teamName": "New York Rangers", "position": "LW", "number": 10, "stats": "32 G, 47 A, 79 PTS"},
        "NYR-3": {"id": "NYR-3", "name": "Mika Zibanejad", "team": "NYR", "teamName": "New York Rangers", "position": "C", "number": 93, "stats": "28 G, 39 A, 67 PTS"},
        "NYR-4": {"id": "NYR-4", "name": "Adam Fox", "team": "NYR", "teamName": "New York Rangers", "position": "D", "number": 23, "stats": "11 G, 54 A, 65 PTS"},
        "NYR-5": {"id": "NYR-5", "name": "Chris Kreider", "team": "NYR", "teamName": "New York Rangers", "position": "LW", "number": 20, "stats": "36 G, 21 A, 57 PTS"},

        // Bruins
        "BOS-1": {"id": "BOS-1", "name": "Jeremy Swayman", "team": "BOS", "teamName": "Boston Bruins", "position": "G", "number": 1, "stats": "GAA: 2.32, SV%: .921, SO: 4"},
        "BOS-2": {"id": "BOS-2", "name": "David Pastrnak", "team": "BOS", "teamName": "Boston Bruins", "position": "RW", "number": 88, "stats": "43 G, 38 A, 81 PTS"},
        "BOS-3": {"id": "BOS-3", "name": "Brad Marchand", "team": "BOS", "teamName": "Boston Bruins", "position": "LW", "number": 63, "stats": "26 G, 42 A, 68 PTS"},
        "BOS-4": {"id": "BOS-4", "name": "Charlie McAvoy", "team": "BOS", "teamName": "Boston Bruins", "position": "D", "number": 73, "stats": "8 G, 42 A, 50 PTS"},
        "BOS-5": {"id": "BOS-5", "name": "Hampus Lindholm", "team": "BOS", "teamName": "Boston Bruins", "position": "D", "number": 27, "stats": "9 G, 28 A, 37 PTS"},

        // Maple Leafs
        "TOR-1": {"id": "TOR-1", "name": "Auston Matthews", "team": "TOR", "teamName": "Toronto Maple Leafs", "position": "C", "number": 34, "stats": "51 G, 27 A, 78 PTS"},
        "TOR-2": {"id": "TOR-2", "name": "Mitch Marner", "team": "TOR", "teamName": "Toronto Maple Leafs", "position": "RW", "number": 16, "stats": "27 G, 53 A, 80 PTS"},
        "TOR-3": {"id": "TOR-3", "name": "William Nylander", "team": "TOR", "teamName": "Toronto Maple Leafs", "position": "RW", "number": 88, "stats": "33 G, 39 A, 72 PTS"},
        "TOR-4": {"id": "TOR-4", "name": "John Tavares", "team": "TOR", "teamName": "Toronto Maple Leafs", "position": "C", "number": 91, "stats": "29 G, 38 A, 67 PTS"},
        "TOR-5": {"id": "TOR-5", "name": "Joseph Woll", "team": "TOR", "teamName": "Toronto Maple Leafs", "position": "G", "number": 60, "stats": "GAA: 2.65, SV%: .912, SO: 1"},

        // Canadiens
        "MTL-1": {"id": "MTL-1", "name": "Cole Caufield", "team": "MTL", "teamName": "Montreal Canadiens", "position": "RW", "number": 22, "stats": "26 G, 20 A, 46 PTS"},
        "MTL-2": {"id": "MTL-2", "name": "Nick Suzuki", "team": "MTL", "teamName": "Montreal Canadiens", "position": "C", "number": 14, "stats": "22 G, 34 A, 56 PTS"},
        "MTL-3": {"id": "MTL-3", "name": "Mike Matheson", "team": "MTL", "teamName": "Montreal Canadiens", "position": "D", "number": 8, "stats": "8 G, 31 A, 39 PTS"},
        "MTL-4": {"id": "MTL-4", "name": "Sam Montembeault", "team": "MTL", "teamName": "Montreal Canadiens", "position": "G", "number": 35, "stats": "GAA: 3.05, SV%: .904, SO: 1"},
        "MTL-5": {"id": "MTL-5", "name": "Kirby Dach", "team": "MTL", "teamName": "Montreal Canadiens", "position": "C", "number": 77, "stats": "14 G, 24 A, 38 PTS"},

        // Oilers
        "EDM-1": {"id": "EDM-1", "name": "Connor McDavid", "team": "EDM", "teamName": "Edmonton Oilers", "position": "C", "number": 97, "stats": "42 G, 66 A, 108 PTS"},
        "EDM-2": {"id": "EDM-2", "name": "Leon Draisaitl", "team": "EDM", "teamName": "Edmonton Oilers", "position": "C", "number": 29, "stats": "38 G, 58 A, 96 PTS"},
        "EDM-3": {"id": "EDM-3", "name": "Zach Hyman", "team": "EDM", "teamName": "Edmonton Oilers", "position": "LW", "number": 18, "stats": "33 G, 31 A, 64 PTS"},
        "EDM-4": {"id": "EDM-4", "name": "Evan Bouchard", "team": "EDM", "teamName": "Edmonton Oilers", "position": "D", "number": 2, "stats": "12 G, 35 A, 47 PTS"},
        "EDM-5": {"id": "EDM-5", "name": "Stuart Skinner", "team": "EDM", "teamName": "Edmonton Oilers", "position": "G", "number": 74, "stats": "GAA: 2.68, SV%: .908, SO: 2"},

        // Flames
        "CGY-1": {"id": "CGY-1", "name": "Jacob Markstrom", "team": "CGY", "teamName": "Calgary Flames", "position": "G", "number": 25, "stats": "GAA: 2.75, SV%: .911, SO: 2"},
        "CGY-2": {"id": "CGY-2", "name": "Nazem Kadri", "team": "CGY", "teamName": "Calgary Flames", "position": "C", "number": 91, "stats": "24 G, 37 A, 61 PTS"},
        "CGY-3": {"id": "CGY-3", "name": "Elias Lindholm", "team": "CGY", "teamName": "Calgary Flames", "position": "C", "number": 28, "stats": "22 G, 28 A, 50 PTS"},
        "CGY-4": {"id": "CGY-4", "name": "Rasmus Andersson", "team": "CGY", "teamName": "Calgary Flames", "position": "D", "number": 4, "stats": "10 G, 36 A, 46 PTS"},
        "CGY-5": {"id": "CGY-5", "name": "Blake Coleman", "team": "CGY", "teamName": "Calgary Flames", "position": "C", "number": 20, "stats": "23 G, 19 A, 42 PTS"}
    };

    // Team name mapping
    const teamMapping = {
        "New York Rangers": "NYR",
        "Boston Bruins": "BOS",
        "Toronto Maple Leafs": "TOR",
        "Montreal Canadiens": "MTL",
        "Edmonton Oilers": "EDM",
        "Calgary Flames": "CGY"
    };

    // Simple script to update the strategy summary in real-time
    document.addEventListener('DOMContentLoaded', function() {
        // Game selection and player browsing
        const gameSelect = document.getElementById('game_id');
        const summaryGame = document.getElementById('summary-game');
        const playerFocusHelp = document.getElementById('player-focus-help');
        const teamFilter = document.getElementById('teamFilter');
        const playersTable = document.getElementById('playersTable').querySelector('tbody');

        let selectedHomeTeam = "";
        let selectedAwayTeam = "";

        // The direct button handling was moved to an inline script above
        // to ensure it loads before the modal is referenced

        if (gameSelect) {
            // Check if a game is already selected on page load
            if (gameSelect.value) {
                const selectedOption = gameSelect.options[gameSelect.selectedIndex];
                selectedHomeTeam = selectedOption.getAttribute('data-home');
                selectedAwayTeam = selectedOption.getAttribute('data-away');
                summaryGame.textContent = selectedOption.text || 'Not selected';
            }

            gameSelect.addEventListener('change', function() {
                console.log("Game selected: " + this.value); // Debug log
                const selectedOption = this.options[this.selectedIndex];
                summaryGame.textContent = selectedOption.text || 'Not selected';

                // Store the home and away teams for filtering
                selectedHomeTeam = selectedOption.getAttribute('data-home');
                selectedAwayTeam = selectedOption.getAttribute('data-away');

                // Update the player table when game changes
                updatePlayerTable();
            });
        }

        function updatePlayerTable() {
            // Clear existing players
            playersTable.innerHTML = '';

            if (!selectedHomeTeam && !selectedAwayTeam) return;

            const homeTeamCode = teamMapping[selectedHomeTeam];
            const awayTeamCode = teamMapping[selectedAwayTeam];

            // Filter players for selected teams
            const gamePlayersIds = Object.keys(playerData).filter(id => {
                const player = playerData[id];
                return player.team === homeTeamCode || player.team === awayTeamCode;
            });

            // Add player rows to table
            gamePlayersIds.forEach(id => {
                const player = playerData[id];
                const row = document.createElement('tr');
                row.setAttribute('data-player-id', player.id);
                row.setAttribute('data-team', player.team);
                row.setAttribute('data-position', player.position);

                row.innerHTML = `
                    <td>${player.name}</td>
                    <td>${player.teamName}</td>
                    <td>${player.position}</td>
                    <td>${player.number}</td>
                    <td>${player.stats}</td>
                    <td><button class="btn btn-sm btn-primary add-player-btn"><i class="fas fa-plus"></i></button></td>
                `;

                playersTable.appendChild(row);
            });

            // Reattach event listeners to new buttons
            document.querySelectorAll('.add-player-btn').forEach(button => {
                button.addEventListener('click', addPlayerToSelection);
            });

            // Update team filter with available teams for the selected game
            teamFilter.innerHTML = '<option value="all">All Teams</option>';

            if (homeTeamCode) {
                const option = document.createElement('option');
                option.value = homeTeamCode;
                option.textContent = selectedHomeTeam;
                teamFilter.appendChild(option);
            }

            if (awayTeamCode) {
                const option = document.createElement('option');
                option.value = awayTeamCode;
                option.textContent = selectedAwayTeam;
                teamFilter.appendChild(option);
            }
        }

        // Array to store selected players
        let selectedPlayers = [];

        // Add player to selection
        function addPlayerToSelection() {
            const row = this.closest('tr');
            const playerId = row.getAttribute('data-player-id');
            const playerName = row.cells[0].textContent;
            const playerTeam = row.cells[1].textContent;
            const playerPosition = row.cells[2].textContent;

            // Check if player is already selected
            if (!selectedPlayers.some(p => p.id === playerId)) {
                selectedPlayers.push({
                    id: playerId,
                    name: playerName,
                    team: playerTeam,
                    position: playerPosition
                });

                updateSelectedPlayersList();
            }
        }

        // Update the selected players list
        function updateSelectedPlayersList() {
            const selectedPlayersList = document.getElementById('selectedPlayersList');
            const noPlayersMessage = document.getElementById('noPlayersMessage');

            if (selectedPlayers.length > 0) {
                noPlayersMessage.style.display = 'none';
                selectedPlayersList.innerHTML = '';

                selectedPlayers.forEach(player => {
                    const listItem = document.createElement('li');
                    listItem.className = 'list-group-item d-flex justify-content-between align-items-center';
                    listItem.innerHTML = `
                        <div>
                            <strong>${player.name}</strong>
                            <span class="ms-2 badge bg-secondary">${player.team} | ${player.position}</span>
                        </div>
                        <button type="button" class="btn btn-sm btn-danger remove-player" data-player-id="${player.id}">
                            <i class="fas fa-times"></i>
                        </button>
                    `;
                    selectedPlayersList.appendChild(listItem);
                });

                // Add event listeners to remove buttons
                document.querySelectorAll('.remove-player').forEach(button => {
                    button.addEventListener('click', removePlayer);
                });
            } else {
                noPlayersMessage.style.display = 'block';
                selectedPlayersList.innerHTML = '';
            }
        }

        // Remove player from selection
        function removePlayer() {
            const playerId = this.getAttribute('data-player-id');
            selectedPlayers = selectedPlayers.filter(p => p.id !== playerId);
            updateSelectedPlayersList();
        }

        // Confirm player selection
        document.getElementById('confirmPlayerSelection').addEventListener('click', function() {
            const playerFocusInput = document.getElementById('player_focus');
            const summaryPlayer = document.getElementById('summary-player');

            const playerNames = selectedPlayers.map(p => p.name).join(', ');
            playerFocusInput.value = playerNames;

            // Update the summary as well if it exists
            if (summaryPlayer) {
                summaryPlayer.textContent = playerNames || 'All Players';
            }

            // Close the modal
            const modalElement = document.getElementById('playerSelectionModal');
            const modal = bootstrap.Modal.getInstance(modalElement);
            if (modal) {
                modal.hide();
            }
        });

        // Filter players
        function filterPlayers() {
            const playerSearchInput = document.getElementById('playerSearchInput');
            const positionFilter = document.getElementById('positionFilter');

            const searchText = playerSearchInput.value.toLowerCase();
            const position = positionFilter.value;
            const team = teamFilter.value;

            document.querySelectorAll('#playersTable tbody tr').forEach(row => {
                const playerName = row.cells[0].textContent.toLowerCase();
                const playerTeam = row.getAttribute('data-team');
                const playerPosition = row.getAttribute('data-position');

                const matchesSearch = playerName.includes(searchText);
                const matchesPosition = position === 'all' || playerPosition === position;
                const matchesTeam = team === 'all' || playerTeam === team;

                if (matchesSearch && matchesPosition && matchesTeam) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            });
        }

        // Search and filter event listeners
        document.getElementById('searchPlayerBtn').addEventListener('click', filterPlayers);
        document.getElementById('playerSearchInput').addEventListener('keyup', function(event) {
            if (event.key === 'Enter') {
                filterPlayers();
            }
        });
        document.getElementById('positionFilter').addEventListener('change', filterPlayers);
        teamFilter.addEventListener('change', filterPlayers);

        // When player modal is about to be shown, load the players
        document.getElementById('playerSelectionModal').addEventListener('show.bs.modal', function() {
            updatePlayerTable();
        });

        // Base bid
        const baseBidInput = document.getElementById('base_bid');
        const summaryBaseBid = document.getElementById('summary-base-bid');

        if (baseBidInput && summaryBaseBid) {
            baseBidInput.addEventListener('input', function() {
                summaryBaseBid.textContent = Number(this.value).toLocaleString();
            });
        }

        // Bid increment
        const bidIncrementInput = document.getElementById('bid_increment');
        const summaryBidIncrement = document.getElementById('summary-bid-increment');

        if (bidIncrementInput && summaryBidIncrement) {
            bidIncrementInput.addEventListener('input', function() {
                summaryBidIncrement.textContent = Number(this.value).toLocaleString();
            });
        }

        // Max bid
        const maxBidInput = document.getElementById('max_bid');
        const summaryMaxBid = document.getElementById('summary-max-bid');

        if (maxBidInput && summaryMaxBid) {
            maxBidInput.addEventListener('input', function() {
                summaryMaxBid.textContent = Number(this.value).toLocaleString();
            });
        }

        // Team focus
        const teamFocusSelect = document.getElementById('team_focus');
        const summaryTeam = document.getElementById('summary-team');

        if (teamFocusSelect && summaryTeam) {
            teamFocusSelect.addEventListener('change', function() {
                const teamMap = {
                    'both': 'Both Teams',
                    'home': 'Home Team Only',
                    'away': 'Away Team Only'
                };
                summaryTeam.textContent = teamMap[this.value] || 'Both Teams';
            });
        }

        // Player focus
        const playerFocusInput = document.getElementById('player_focus');
        const summaryPlayer = document.getElementById('summary-player');

        if (playerFocusInput && summaryPlayer) {
            playerFocusInput.addEventListener('input', function() {
                summaryPlayer.textContent = this.value.trim() || 'All Players';
            });
        }

        // Period restrictions
        const periodRestrictionsSelect = document.getElementById('period_restrictions');
        const summaryPeriods = document.getElementById('summary-periods');

        if (periodRestrictionsSelect && summaryPeriods) {
            periodRestrictionsSelect.addEventListener('change', function() {
                const periodMap = {
                    '': 'All Periods',
                    '1': '1st Period Only',
                    '2': '2nd Period Only',
                    '3': '3rd Period Only',
                    '1,2': '1st and 2nd Periods',
                    '2,3': '2nd and 3rd Periods',
                    'OT': 'Overtime Only',
                    'SO': 'Shootout Only'
                };
                summaryPeriods.textContent = periodMap[this.value] || 'All Periods';
            });
        }
    });
</script>
{% endblock %}
